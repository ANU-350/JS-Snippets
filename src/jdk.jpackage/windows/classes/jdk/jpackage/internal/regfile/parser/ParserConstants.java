/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
/*
 * Copyright (c) 2022, Red Hat Inc. and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package jdk.jpackage.internal.regfile.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 1;
  /** RegularExpression Id. */
  int NUMBER = 2;
  /** RegularExpression Id. */
  int HEADER = 3;
  /** RegularExpression Id. */
  int PRINTABLE = 4;
  /** RegularExpression Id. */
  int PRINTABLE_NO_BACKSLASH = 5;
  /** RegularExpression Id. */
  int HEX = 6;
  /** RegularExpression Id. */
  int HEX_PAIR = 7;
  /** RegularExpression Id. */
  int HEX_MULTILINE = 8;
  /** RegularExpression Id. */
  int END_QUOTED = 9;
  /** RegularExpression Id. */
  int QUOTED = 10;
  /** RegularExpression Id. */
  int KEY_PART = 11;
  /** RegularExpression Id. */
  int KEY = 12;
  /** RegularExpression Id. */
  int NAME = 13;
  /** RegularExpression Id. */
  int TYPE = 14;
  /** RegularExpression Id. */
  int VALUE_REG_SZ = 15;
  /** RegularExpression Id. */
  int VALUE_REG_BINARY = 16;
  /** RegularExpression Id. */
  int VALUE_REG_DWORD = 17;
  /** RegularExpression Id. */
  int VALUE_REG_QWORD = 18;
  /** RegularExpression Id. */
  int VALUE_REG_MULTI_SZ = 19;
  /** RegularExpression Id. */
  int VALUE_REG_EXPAND_SZ = 20;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<EOL>",
    "<NUMBER>",
    "<HEADER>",
    "<PRINTABLE>",
    "<PRINTABLE_NO_BACKSLASH>",
    "<HEX>",
    "<HEX_PAIR>",
    "<HEX_MULTILINE>",
    "<END_QUOTED>",
    "<QUOTED>",
    "<KEY_PART>",
    "<KEY>",
    "<NAME>",
    "<TYPE>",
    "<VALUE_REG_SZ>",
    "<VALUE_REG_BINARY>",
    "<VALUE_REG_DWORD>",
    "<VALUE_REG_QWORD>",
    "<VALUE_REG_MULTI_SZ>",
    "<VALUE_REG_EXPAND_SZ>",
  };

}
