// Remove self-loops.
new RemoveSelfLoopsFilter("Remove Self-Loops").apply(graph);

// Hide secondary edges.
remove("short_name", "FP|RA|IO|RP");

// Pretty-print Bool nodes to be shown as output slots.
function replaceComparisonWithSign(text) {
  var comparison = text.replace('[','').replace(']','')
  switch (comparison) {
    case "eq":  return "=";
    case "gt":  return ">";
    case "lt":  return "<";
    case "ne":  return "â‰ ";
    case "le":  return "â‰¤";
    case "ge":  return "â‰¥";
    default:    return comparison;
  }
}
editSameProperty(matches("name", "Bool"), "dump_spec", replaceComparisonWithSign);

// Add a more informative text for null-pointer input slots.
editSameProperty(and([matches("name", "ConP"), matches("dump_spec", "#NULL")]),
                 "short_name",
                 function(t) {return "null";});

// Add extra line to method calls with callee information.
function methodInfo(dump_spec) {
  dump_components = split_string(dump_spec);
  if (dump_components.length < 3) {
    return null;
  }
  var tm = /(uncommon_trap\(reason=\'(\w*)\')/.exec(dump_components[2]);
  if (tm == null || typeof tm[2] == 'undefined') {
    return dump_components[2];
  }
  return "trap: " + tm[2];
}
editProperty(matches("name", "CallStaticJava"), "dump_spec", "extra_label", methodInfo);

// Add extra line to exception creation nodes with the name of the exception.
function exceptionInfo(dump_spec) {
  dump_components = split_string(dump_spec);
  if (dump_components.length < 2) {
    return null;
  }
  ex_components = dump_components[1].split(/(:)/);
  if (ex_components.length < 3) {
    return null;
  }
  return ex_components[2];
}
editProperty(matches("name", "CreateEx"), "dump_spec", "extra_label", exceptionInfo);

// Condense inputs for all nodes.
var anyNode = matches("name", ".*");
var f = new RemoveInputsFilter("");
f.addRule(new RemoveInputsFilter.RemoveInputsRule(matches("name", "Root"), anyNode));
f.apply(graph);

var fun = matches("name", "SafePoint|CallStaticJava|CallDynamicJava|CallJava|CallLeaf|CallRuntime|AbstractLock|CallLeafNoFP|Call|CallStaticJavaDirect");
var topCon = and([matches("name", "Con"),
                  matches("type", "top")]);
var f = new RemoveInputsFilter("");
f.addRule(new RemoveInputsFilter.RemoveInputsRule(fun, or([topCon, matches("short_name", "I")])));
f.apply(graph);

var other = matches("name", "Halt|Rethrow|ShouldNotReachHere|RethrowException|Return|Ret|MergeMem|Initialize|MemBarAcquire|MemBarRelease|Unlock|Lock|Allocate|AllocateArray");
var f = new RemoveInputsFilter("");
f.addRule(new RemoveInputsFilter.RemoveInputsRule(other, topCon));
f.apply(graph);

new RemoveEmptySlotsFilter("", anyNode).apply(graph);

// Inline Parm and start MachProj nodes, except control ones.
new SplitFilter("", and([matches("name", "Parm|MachProj"),
                         not(matches("category", "control")),
                         successorOf(matches("name", "Start"))]),
                "[short_name]").apply(graph);

// Combine single-input nodes.
combine(anyNode, matches("name", "Proj|IfFalse|IfTrue|JProj|MachProj|JumpProj|CatchProj|Parm"));
combine(anyNode, matches("name", "SCMemProj"), ["SCM"]);
combine(matches("name", "Cmp.*"), matches("name", "Bool"), ["[dump_spec]"]);
combine(anyNode, matches("name", "Decode(N|NarrowPtr|NKlass)"), ["DC"]);
combine(anyNode, matches("name", "Conv2B"), ["2B"]);
combine(anyNode, matches("name", "Conv[LFD]2I"), ["2I"]);
combine(anyNode, matches("name", "Conv[IFD]2L"), ["2L"]);
combine(anyNode, matches("name", "Conv[ILD]2F"), ["2F"]);
combine(anyNode, matches("name", "Conv[ILF]2D"), ["2D"]);

// Inline (split) constant nodes.
split("name", "BoxLock");
new SplitFilter("", matches("name", "MachTemp"), "T").apply(graph);
new SplitFilter("", matches("name", "ThreadLocal"), "TL").apply(graph);
new SplitFilter("", matches("name", "(Con[A-Z]?)|ConNKlass|(loadCon.*)"), "[short_name]", "[name]").apply(graph);
