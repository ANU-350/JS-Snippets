removeSelfLoops();

// Hide secondary edges.
remove(matches("short_name", "FP|RA|IO|RP"));

// Pretty-print Bool nodes to be shown as output slots.
function replaceComparisonWithSign(text) {
  var comparison = text.replace('[','').replace(']','')
  switch (comparison) {
    case "eq":  return "=";
    case "gt":  return ">";
    case "lt":  return "<";
    case "ne":  return "â‰ ";
    case "le":  return "â‰¤";
    case "ge":  return "â‰¥";
    default:    return comparison;
  }
}
editSameProperty(matches("name", "Bool"), "dump_spec", replaceComparisonWithSign);

// Add a more informative text for null-pointer input slots.
editSameProperty(and([matches("name", "ConP"), matches("dump_spec", "#NULL")]),
                 "short_name",
                 function(t) {return "null";});

// Condense inputs for all nodes.

var anyNode = matches("name", ".*");
removeInputs(matches("name", "Root"), anyNode);

var fun = matches("name", "SafePoint|CallStaticJava|CallDynamicJava|CallJava|CallLeaf|CallRuntime|AbstractLock|CallLeafNoFP|Call|CallStaticJavaDirect");
var topCon = and([matches("name", "Con"),
                  matches("type", "top")]);
removeInputs(fun, or([topCon, matches("short_name", "I")]));

var other = matches("name", "Halt|Rethrow|ShouldNotReachHere|RethrowException|Return|Ret|MergeMem|Initialize|MemBarAcquire|MemBarRelease|Unlock|Lock|Allocate|AllocateArray");
removeInputs(other, topCon);

removeEmptySlots(anyNode);

// Inline Parm and start MachProj nodes, except control ones.
split(and([matches("name", "Parm|MachProj"),
           not(matches("category", "control")),
           successorOf(matches("name", "Start"))]),
      ["[short_name]"]);

// Combine single-input nodes.
combine(anyNode, matches("name", "Proj|IfFalse|IfTrue|JProj|MachProj|JumpProj|CatchProj|Parm"));
combine(anyNode, matches("name", "SCMemProj"), ["SCM"]);
combine(matches("name", "Cmp.*"), matches("name", "Bool"), ["[dump_spec]"]);
combine(anyNode, matches("name", "Decode(N|NarrowPtr|NKlass)"), ["DC"]);
combine(anyNode, matches("name", "Conv2B"), ["2B"]);
combine(anyNode, matches("name", "Conv[LFD]2I"), ["2I"]);
combine(anyNode, matches("name", "Conv[IFD]2L"), ["2L"]);
combine(anyNode, matches("name", "Conv[ILD]2F"), ["2F"]);
combine(anyNode, matches("name", "Conv[ILF]2D"), ["2D"]);

// Inline (split) constant nodes.
split(matches("name", "MachTemp"), ["T"]);
split(matches("name", "ThreadLocal"), ["TL"]);
split(matches("name", "(Con[A-Z]?)|ConNKlass|(loadCon.*)"), ["[short_name]", "[name]"]);
