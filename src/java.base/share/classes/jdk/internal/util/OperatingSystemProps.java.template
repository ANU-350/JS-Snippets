/*
 * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package jdk.internal.util;

/**
 * The corresponding source file is generated by GensrcMisc.gmk for java.base.
 * @see OperatingSystem
 * @see Architecture
 */
class OperatingSystemProps {

    // Unique integers named to match the build system naming of the build target
    // The values must match the ordinals of the respective enum
    private static final int TARGET_OS_linux   = 0;
    private static final int TARGET_OS_macosx  = 1;
    private static final int TARGET_OS_windows = 2;
    private static final int TARGET_OS_aix     = 3;

    // Index/ordinal of the current OperatingSystem enum as substituted by the build
    static final int CURRENT_OS_ORDINAL = TARGET_OS_@@OPENJDK_TARGET_OS@@;

    // Precomputed booleans for each Operating System
    static final boolean TARGET_OS_IS_LINUX   = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_linux;
    static final boolean TARGET_OS_IS_MACOSX  = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_macosx;
    static final boolean TARGET_OS_IS_WINDOWS = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_windows;
    static final boolean TARGET_OS_IS_AIX     = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_aix;

    // Unique integers named to match the build system naming of the OPENJDK_TARGET_CPU
    // The values must match the ordinals of the Architecture enum
    private static final int TARGET_ARCH_x86_64   = 0;   // aka X64, AMD64
    private static final int TARGET_ARCH_x86      = 1;
    private static final int TARGET_ARCH_aarch64  = 2;
    private static final int TARGET_ARCH_riscv64  = 3;
    private static final int TARGET_ARCH_s390x    = 4;
    private static final int TARGET_ARCH_ppc64le  = 5;

    // Index/ordinal of the current Architecure enum as substituted by the build
    static final int CURRENT_ARCH_ORDINAL = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@;

    // Architecture.is64Bit() uses this value
    static final int TARGET_ARCH_BITS = @@OPENJDK_TARGET_CPU_BITS@@;

    // Precomputed booleans for each Architecture, shared with jdk.internal.util.Architecture
    // The variables are named to match the Architecture value names, and the values are named to match the build variables.
    static final boolean TARGET_ARCH_IS_X64         = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_x86_64;
    static final boolean TARGET_ARCH_IS_X86         = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_x86;
    static final boolean TARGET_ARCH_IS_AARCH64     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_aarch64;
    static final boolean TARGET_ARCH_IS_RISCV64     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_riscv64;
    static final boolean TARGET_ARCH_IS_S390        = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_s390x;
    static final boolean TARGET_ARCH_IS_PPC64LE     = TARGET_ARCH_@@OPENJDK_TARGET_CPU@@ == TARGET_ARCH_ppc64le;
}
