/*
 * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package jdk.internal.util.regex;

import static java.lang.Character.UnicodeScript;

/**
 * Helper class for supporting the GB9c rule in Unicode Text Segmentation TR29
 *
 * Macros:
 * ConjunctLinkingScripts	=[\p{sc=Gujr}\p{sc=Telu}\p{sc=Mlym}\p{sc=Orya}\p{sc=Beng}\p{sc=Deva}]
 * ConjunctLinker	=[ConjunctLinkingScripts&\p{Indic_Syllabic_Category=Virama}]
 * LinkingConsonant	=[ConjunctLinkingScripts&\p{Indic_Syllabic_Category=Consonant}]
 * ExtCccZwj	=[[\p{gcb=Extend}-\p{ccc=0}]\p{gcb=ZWJ}]
 *
 * The rule: Do not break within certain combinations with ConjunctLinker.
 * GB9c	LinkingConsonant ExtCccZwj* ConjunctLinker ExtCccZwj*	x	LinkingConsonant
 *
 */
final class ConjunctLinker {

    static boolean ofConjunctLinkingScripts(int cp) {
        // fast path (below Devanagari script)
        if (cp < '\u0900') {
            return false;
        } else {
            return switch (UnicodeScript.of(cp)) {
                case GUJARATI, TELUGU, MALAYALAM, ORIYA, BENGALI, DEVANAGARI -> true;
                default -> false;
            };
        }
    }

    static boolean isConjunctLinker(int cp) {
        if (ofConjunctLinkingScripts(cp)) {
            return
%%%Virama%%%
        }
        return false;
    }

    static boolean isLinkingConsonant(int cp) {
        if (ofConjunctLinkingScripts(cp)) {
            return
%%%Consonant%%%
        }
        return false;
    }
}
