################################################################################
#       XML Library (java.xml) Configuration File
#
# This file is in java.util.Properties format and typically located in the conf 
# directory of the Java installation. It may contain key/value pairs for specifying
# the implementation class of a factory and/or properties that have corresponding
# system properties. 
#
# This file can be replaced by specifying a filename with the java.xml.config.file
# system property. For example java -Djava.xml.config.file=myConfigurationFile
################################################################################

# ---- JDK Sample Configuration ----
#
# This sample demonstrates what can be set in the configuration file. Throughout
# the sample file, some exmple settings are commented out so as to not cause
# behavior change. The ones that are not are generally set to values the same as
# the default to be used by tests.
#
#
# JAXP Lookup Mechanism:
# The configuration file is one of the ways for the factories to locate and load
# the implementation class. To specify an implementation class, write a key/value
# pair with the factory ID and fully qualified name of the implementation class,
# for example, the following specify the implementation class for DOM:
#
# javax.xml.parsers.DocumentBuilderFactory=common.config.DocumentBuilderFactoryImpl
#
#
# Java SE and JDK Implementation Specific Properties:
#
# Properties with corresponding System Properties defined in Java SE or supported
# by the JDK Implementation can be placed in the configuration file to override
# the default property values. The format is:
#     system-property-name=value
#
#
# Extension Functions:
# This property determines whether XSLT and XPath extension functions are allowed.
# The following example disallows extension functions
#jdk.xml.enableExtensionFunctions=false
#
#
# Overriding the default parser:
# The JDK provides default parser implementation, but also allows third party
# implementation to override it. If it is necessary, users may set the property
# to true. By default, it is set to disallow overriding the default parser as
# done below.
jdk.xml.overrideDefaultParser=false
#
#
# External Access Properties:
#
# The External Access Properties are defined in javax.xml.XMLConstants. Their
# system properties are javax.xml.accessExternalDTD, javax.xml.accessExternalSchema,
# and javax.xml.accessExternalStylesheet. The values are a list of protocols separated
# by comma. The followings are example of external access settings:
#
# allow local (file) external DTD
# allow local (file) and remote (http) external DTD
# javax.xml.accessExternalDTD=file
#
# allow local (file) and remote (http) external schema
# javax.xml.accessExternalSchema=file, http
#
# reject external stylesheet
# javax.xml.accessExternalStylesheet=""
#
# allow all external stylesheet
# javax.xml.accessExternalStylesheet="all"
#
#
# Catalog Properties:
# The Catalog API defines four features: FILES, PREFER, DEFER and RESOLVE.
# Except PREFER, all other properties with system properties can be placed in
# the configuration file. Examples are as follows.
#
# specify a custom catalog file with its URI
# javax.xml.catalog.files = file:///users/auser/catalog/catalog.xml
#
# instructs the CatalogResolver to load alternative catalogs as needed
# javax.xml.catalog.defer=true
#
# the value of the resolve property is defined to be strict/continue/ignore
# to be strict, that is, to report an error if an External resource can not be
# resolved through a catalog, set the property to be strict as follows
# javax.xml.catalog.resolve=strict
#
#
# Catalog is enabled for JAXP processors:
# javax.xml.useCatalog=true
#
# Implementation specific limits:
#
# DTD related limits
#jdk.xml.entityExpansionLimit=64000
#jdk.xml.totalEntitySizeLimit=5E7
#jdk.xml.maxGeneralEntitySizeLimit=0
#jdk.xml.maxParameterEntitySizeLimit=1E6
#jdk.xml.entityReplacementLimit=3E6
#
# General XML limits
#jdk.xml.elementAttributeLimit=10000
#jdk.xml.maxOccurLimit=5000
#jdk.xml.maxElementDepth=0
jdk.xml.maxXMLNameLimit=1000
#
# XPath Limits
jdk.xml.xpathExprGrpLimit=10
jdk.xml.xpathExprOpLimit=100
jdk.xml.xpathTotalOpLimit=10000

