################################################################################
#           JAXP Compatibility Configuration File
#
# This is one of the three configuration files provided in the JDK:
#
# jaxp.properties: this is the default configuration that the JDK uses to set
# property values when XML factories are initiated.
#
# jaxp-strict.properties: this property file provides settings that will be
# equivalent to what will be the default JAXP settings in a future release to
# make the use of JAXP more secure by default. This file allows deployments to
# test the more secure/strict behavior, identify issues such as a processor
# unknowingly makes outbound network connections to fetch DTD, or processes XML
# that relies on extension functions.
#
# jaxp-compat.properties: this configuration specifies the property values that
# are the same as the properties' default values. It can be used to regain
# compatibility from a more strict configuration in a future release.
# The difference from the default `jaxp.properties` is that it contains additional
# properties that were not included in jaxp.properties, setting them to their
# default values.
#
# In this configuration, properties that have more restrictive settings as in the
# strict configuration (jaxp-strict.properties) are reversed back to their
# defaults. In particular:
#   - JDKCatalog Resolve is set to "continue"
#   - Extension Functions are enabled
#   - JAXP Limits are set to their default values
#
# This configuration file can be used to reverse back to a working environment
# prior to any more restrictive configuration that may have been applied.
# Use the system property java.xml.config.file to override the default configuration:
#
#     java -Djava.xml.config.file=$JAVA_HOME/conf/jaxp-compat.properties
#
# The pathname to the configuration file must be valid. If it is not absolute,
# it will be considered relative to the working directory of the JVM. If there
# is an error reading the configuration file, the configuration process proceeds
# as if the java.xml.config.file property was not set.
#
################################################################################

#
# ---- Implementation Specific Properties ----
# For a complete list of properties, refer to the Implementation Specific Properties
# table in the java.xml/module-summary.
#
# Extension Functions:
#
# This property determines whether XSLT and XPath extension functions are allowed.
# The value type is boolean and the default value is true (allowing
# extension functions). The following entry would override any change that may
# have been made by the default configuration:
#
jdk.xml.enableExtensionFunctions=true
#
#
# Overriding the default parser:
#
# This property allows using a third party implementation to override the default
# parser provided by the JDK. The value type is boolean and the default value is
# false, disallowing overriding the default parser. The setting below reflects
# the default property setting:
#
jdk.xml.overrideDefaultParser=false
#
# Implementation Specific Properties - jdkcatalog.resolve
#
# This property instructs the JDK default CatalogResolver to act in accordance with
# the setting when unable to resolve an external reference with the built-in Catalog.
# The options are:
#     continue -- indicates that the processing should continue
#     ignore -- indicates that the reference is skipped
#     strict -- indicates that the resolver should throw a CatalogException
#
# The following setting would allow the resolution to continue in cases where
# external references are not resolved by a user-defined resolver or catalog if
# any, and the JDKCatalog:
jdk.xml.jdkcatalog.resolve=continue
#
# Implementation Specific Properties - DTD
#
# This property instructs the parsers to: deny, ignore or allow DTD processing.
# The following setting would cause the parser to reject DTD by throwing an exception.
# jdk.xml.dtd.support=deny
#
# The following setting permits the processor to continue processing DTDs
jdk.xml.dtd.support=allow
#
# Implementation Specific Properties - Limits
#
# Limits have a value type Integer. The values must be positive integers. Zero
# means no limit.
#
# Limits the number of entity expansions
jdk.xml.entityExpansionLimit=64000
#
# Limits the total size of all entities that include general and parameter entities.
# The size is calculated as an aggregation of all entities.
jdk.xml.totalEntitySizeLimit=10000000
#
# Limits the maximum size of any general entities.
jdk.xml.maxGeneralEntitySizeLimit=0
#
# Limits the maximum size of any parameter entities, including the result of
# nesting multiple parameter entities.
jdk.xml.maxParameterEntitySizeLimit=1000000
#
# Limits the total number of nodes in all entity references.
jdk.xml.entityReplacementLimit=3000000
#
# Limits the number of attributes an element can have. The default value is 10000.
jdk.xml.elementAttributeLimit=10000
#
# Limits the number of content model nodes that may be created when building a
# grammar for a W3C XML Schema that contains maxOccurs attributes with values
# other than "unbounded". The default value is 5000.
jdk.xml.maxOccurLimit=5000
#
# Limits the maximum element depth. The default value is 0.
jdk.xml.maxElementDepth=0
#
# Limits the maximum size of XML names, including element name, attribute name
# and namespace prefix and URI. The default value is 1000.
jdk.xml.maxXMLNameLimit=1000
#
#
# XPath Limits
#
# Limits the number of groups an XPath expression can contain. The default value is 10.
jdk.xml.xpathExprGrpLimit=10
#
# Limits the number of operators an XPath expression can contain. The default value is 100.
jdk.xml.xpathExprOpLimit=100
#
# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.
jdk.xml.xpathTotalOpLimit=10000
