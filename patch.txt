diff --git a/make/src/classes/build/tools/jfr/GenerateJfrFiles.java b/make/src/classes/build/tools/jfr/GenerateJfrFiles.java
index dbaa8db7f65..1dc0e278da4 100644
--- a/make/src/classes/build/tools/jfr/GenerateJfrFiles.java
+++ b/make/src/classes/build/tools/jfr/GenerateJfrFiles.java
@@ -174,6 +174,7 @@ public class GenerateJfrFiles {
         boolean cutoff;
         boolean throttle;
         boolean experimental;
+        boolean internal;
         long id;
         boolean isEvent;
         boolean isRelation;
@@ -197,6 +198,7 @@ public class GenerateJfrFiles {
             pos.writeBoolean(cutoff);
             pos.writeBoolean(throttle);
             pos.writeBoolean(experimental);
+            pos.writeBoolean(internal);
             pos.writeLong(id);
             pos.writeBoolean(isEvent);
             pos.writeBoolean(isRelation);
@@ -487,6 +489,7 @@ public class GenerateJfrFiles {
                 currentType.description = getString(attributes, "description");
                 currentType.category = getString(attributes, "category");
                 currentType.experimental = getBoolean(attributes, "experimental", false);
+                currentType.internal = getBoolean(attributes, "internal", false);
                 currentType.thread = getBoolean(attributes, "thread", false);
                 currentType.stackTrace = getBoolean(attributes, "stackTrace", false);
                 currentType.startTime = getBoolean(attributes, "startTime", true);
@@ -863,6 +866,9 @@ public class GenerateJfrFiles {
     private static void printWriteData(Printer out, TypeElement type) {
         out.write("  template <typename Writer>");
         out.write("  void writeData(Writer& w) {");
+        if (type.isEvent && type.internal) {
+            out.write("    JfrEventSetting::unhide_internal_events();");
+        }
         if (("_thread_in_native").equals(type.commitState)) {
             out.write("    // explicit epoch synchronization check");
             out.write("    JfrEpochSynchronization sync;");
diff --git a/src/hotspot/share/jfr/jni/jfrUpcalls.cpp b/src/hotspot/share/jfr/jni/jfrUpcalls.cpp
index e8b846d6021..7c3decc8377 100644
--- a/src/hotspot/share/jfr/jni/jfrUpcalls.cpp
+++ b/src/hotspot/share/jfr/jni/jfrUpcalls.cpp
@@ -45,6 +45,8 @@ static Symbol* on_retransform_method_sym = NULL;
 static Symbol* on_retransform_signature_sym = NULL;
 static Symbol* bytes_for_eager_instrumentation_sym = NULL;
 static Symbol* bytes_for_eager_instrumentation_sig_sym = NULL;
+static Symbol* unhide_internal_types_sym = NULL;
+static Symbol* unhide_internal_types_sig_sym = NULL;
 
 static bool initialize(TRAPS) {
   static bool initialized = false;
@@ -55,7 +57,9 @@ static bool initialize(TRAPS) {
     on_retransform_signature_sym = SymbolTable::new_permanent_symbol("(JZLjava/lang/Class;[B)[B");
     bytes_for_eager_instrumentation_sym = SymbolTable::new_permanent_symbol("bytesForEagerInstrumentation");
     bytes_for_eager_instrumentation_sig_sym = SymbolTable::new_permanent_symbol("(JZLjava/lang/Class;[B)[B");
-    initialized = bytes_for_eager_instrumentation_sig_sym != NULL;
+    unhide_internal_types_sym = SymbolTable::new_permanent_symbol("unhideInternalTypes");
+    unhide_internal_types_sig_sym = SymbolTable::new_permanent_symbol("()V");
+    initialized = unhide_internal_types_sig_sym != NULL;
   }
   return initialized;
 }
@@ -82,7 +86,8 @@ static const typeArrayOop invoke(jlong trace_id,
   args.push_oop(old_byte_array);
   JfrJavaSupport::call_static(&args, THREAD);
   if (HAS_PENDING_EXCEPTION) {
-    log_error(jfr, system)("JfrUpcall failed");
+    ResourceMark rm(THREAD);
+    log_error(jfr, system)("JfrUpcall failed for %s", method_sym->as_C_string());
     return NULL;
   }
   // The result should be a [B
@@ -179,3 +184,19 @@ void JfrUpcalls::new_bytes_eager_instrumentation(jlong trace_id,
   *new_class_data_len = new_bytes_length;
   *new_class_data = new_bytes;
 }
+
+bool JfrUpcalls::unhide_internal_types(TRAPS) {
+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(THREAD));
+  JavaValue result(T_VOID);
+  const Klass* klass = SystemDictionary::resolve_or_fail(jvm_upcalls_class_sym, true, CHECK_false);
+  assert(klass != NULL, "invariant");
+  JfrJavaArguments args(&result, klass, unhide_internal_types_sym, unhide_internal_types_sig_sym);
+  JfrJavaSupport::call_static(&args, THREAD);
+  if (HAS_PENDING_EXCEPTION) {
+    CLEAR_PENDING_EXCEPTION;
+    ResourceMark rm(THREAD);
+    log_error(jfr, system)("JfrUpcall failed for %s", unhide_internal_types_sym->as_C_string());
+    return false;
+  }
+  return true;
+}
diff --git a/src/hotspot/share/jfr/jni/jfrUpcalls.hpp b/src/hotspot/share/jfr/jni/jfrUpcalls.hpp
index 0bfe7074b4c..cefda39bf6b 100644
--- a/src/hotspot/share/jfr/jni/jfrUpcalls.hpp
+++ b/src/hotspot/share/jfr/jni/jfrUpcalls.hpp
@@ -53,6 +53,8 @@ class JfrUpcalls : AllStatic {
                              jint* new_class_data_len,
                              unsigned char** new_class_data,
                              TRAPS);
+
+  static bool unhide_internal_types(TRAPS);
 };
 
 #endif // SHARE_JFR_JNI_JFRUPCALLS_HPP
diff --git a/src/hotspot/share/jfr/metadata/metadata.xml b/src/hotspot/share/jfr/metadata/metadata.xml
index 2cc8cc10bea..eda98b69fda 100644
--- a/src/hotspot/share/jfr/metadata/metadata.xml
+++ b/src/hotspot/share/jfr/metadata/metadata.xml
@@ -1034,7 +1034,7 @@
     <Field type="string" name="name" label="Name" />
   </Event>
 
-  <Event name="ZThreadDebug" category="Java Virtual Machine, GC, Detailed" label="ZGC Thread Event" description="Temporary latency measurements used during development and debugging of ZGC" thread="true" experimental="true">
+  <Event name="ZThreadDebug" category="Java Virtual Machine, GC, Detailed" label="ZGC Thread Event" description="Temporary latency measurements used during development and debugging of ZGC" thread="true" internal="true">
     <Field type="uint" name="gcId" label="GC Identifier" relation="GcId"/>
     <Field type="string" name="name" label="Name" />
   </Event>
@@ -1093,6 +1093,11 @@
     <Field type="ulong" name="totalFinalizersRun" label="Finalizers Run" description="Total number of finalizers run since JVM start" />
   </Event>
 
+  <Event name="Debug" category="Java Virtual Machine, Debug" label="Debug Message" startTime="false" thread="true" stackTrace="false" internal="true">
+    <Field type="string" name="message" label="Message"  />
+    <Field type="uint" name="value" label="Value"/>
+  </Event>
+
   <Type name="DeoptimizationReason" label="Deoptimization Reason">
     <Field type="string" name="reason" label="Reason" />
   </Type>
diff --git a/src/hotspot/share/jfr/metadata/metadata.xsd b/src/hotspot/share/jfr/metadata/metadata.xsd
index 017307e3847..95aa2b94e8c 100644
--- a/src/hotspot/share/jfr/metadata/metadata.xsd
+++ b/src/hotspot/share/jfr/metadata/metadata.xsd
@@ -1,4 +1,4 @@
-ï»¿<?xml version="1.0" encoding="utf-8"?>
+<?xml version="1.0" encoding="utf-8"?>
 
 <!--
  Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
@@ -65,6 +65,7 @@
               <xs:attribute name="label" type="xs:string" use="required" />
               <xs:attribute name="description" type="xs:string" use="optional" />
               <xs:attribute name="experimental" type="xs:boolean" use="optional" />
+              <xs:attribute name="internal" type="xs:boolean" use="optional" />
               <xs:attribute name="thread" type="xs:boolean" use="optional" />
               <xs:attribute name="startTime" type="xs:boolean" use="optional" />
               <xs:attribute name="stackTrace" type="xs:boolean" use="optional" />
@@ -87,6 +88,7 @@
                     <xs:attribute name="label" type="xs:string" use="required" />
                     <xs:attribute name="description" type="xs:string" use="optional" />
                     <xs:attribute name="experimental" type="xs:boolean" use="optional" />
+                    <xs:attribute name="internal" type="xs:boolean" use="optional" />
                     <xs:attribute name="relation" type="xs:string" use="optional" />
                   </xs:complexType>
                 </xs:element>
diff --git a/src/hotspot/share/jfr/recorder/checkpoint/jfrMetadataEvent.cpp b/src/hotspot/share/jfr/recorder/checkpoint/jfrMetadataEvent.cpp
index 80ee573da5d..21c80ceae70 100644
--- a/src/hotspot/share/jfr/recorder/checkpoint/jfrMetadataEvent.cpp
+++ b/src/hotspot/share/jfr/recorder/checkpoint/jfrMetadataEvent.cpp
@@ -24,18 +24,31 @@
 
 #include "precompiled.hpp"
 #include "jfr/jni/jfrJavaSupport.hpp"
+#include "jfr/jni/jfrUpcalls.hpp"
 #include "jfr/recorder/checkpoint/jfrMetadataEvent.hpp"
 #include "jfr/recorder/repository/jfrChunkWriter.hpp"
+#include "jfr/recorder/jfrEventSetting.inline.hpp"
 #include "oops/klass.inline.hpp"
 #include "oops/oop.inline.hpp"
 #include "oops/typeArrayOop.inline.hpp"
 #include "runtime/interfaceSupport.inline.hpp"
 #include "runtime/thread.inline.hpp"
+#include "utilities/exceptions.hpp"
 
 static jbyteArray metadata_blob = NULL;
 static u8 metadata_id = 0;
 static u8 last_metadata_id = 0;
 
+static void check_internal_events(JavaThread* jt) {
+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(jt));
+  static bool visible = false;
+  if (!visible) {
+    if (JfrEventSetting::is_internal_events_visible()) {
+      visible = JfrUpcalls::unhide_internal_types(jt);
+    }
+  }
+}
+
 static void write_metadata_blob(JfrChunkWriter& chunkwriter, JavaThread* thread) {
   assert(chunkwriter.is_valid(), "invariant");
   assert(thread != NULL, "invariant");
@@ -60,6 +73,7 @@ void JfrMetadataEvent::write(JfrChunkWriter& chunkwriter) {
   DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(jt));
   // can safepoint here
   ThreadInVMfromNative transition(jt);
+  check_internal_events(jt);
   // header
   const int64_t metadata_offset = chunkwriter.reserve(sizeof(u4));
   chunkwriter.write<u8>(EVENT_METADATA); // ID 0
diff --git a/src/hotspot/share/jfr/recorder/jfrEventSetting.cpp b/src/hotspot/share/jfr/recorder/jfrEventSetting.cpp
index 2769c8705b4..0bccdc98427 100644
--- a/src/hotspot/share/jfr/recorder/jfrEventSetting.cpp
+++ b/src/hotspot/share/jfr/recorder/jfrEventSetting.cpp
@@ -26,6 +26,7 @@
 #include "jfr/recorder/jfrEventSetting.inline.hpp"
 
 JfrNativeSettings JfrEventSetting::_jvm_event_settings;
+bool JfrEventSetting::_internal_events = false;
 
 bool JfrEventSetting::set_threshold(jlong id, jlong threshold_ticks) {
   JfrEventId event_id = (JfrEventId)id;
@@ -58,6 +59,16 @@ void JfrEventSetting::set_large(JfrEventId event_id) {
   setting(event_id).large = true;
 }
 
+void JfrEventSetting::unhide_internal_events() {
+ printf("internal_events = true\n");
+  _internal_events = true;
+}
+
+bool JfrEventSetting::is_internal_events_visible() {
+  return _internal_events;
+}
+
+
 #ifdef ASSERT
 bool JfrEventSetting::bounds_check_event(jlong id) {
   if ((unsigned)id < FIRST_EVENT_ID) {
diff --git a/src/hotspot/share/jfr/recorder/jfrEventSetting.hpp b/src/hotspot/share/jfr/recorder/jfrEventSetting.hpp
index 916edead424..cccc30bc10b 100644
--- a/src/hotspot/share/jfr/recorder/jfrEventSetting.hpp
+++ b/src/hotspot/share/jfr/recorder/jfrEventSetting.hpp
@@ -36,6 +36,7 @@ class JfrEventSetting : AllStatic {
  private:
   static JfrNativeSettings _jvm_event_settings;
   static jfrNativeEventSetting& setting(JfrEventId event_id);
+  static bool _internal_events;
 
  public:
   static void set_enabled(jlong event_id, bool enabled);
@@ -48,6 +49,8 @@ class JfrEventSetting : AllStatic {
   static jlong cutoff(JfrEventId event_id);
   static bool is_large(JfrEventId event_id);
   static void set_large(JfrEventId event_id);
+  static void unhide_internal_events();
+  static bool is_internal_events_visible();
 
   DEBUG_ONLY(static bool bounds_check_event(jlong id);)
 };
diff --git a/src/hotspot/share/services/diagnosticCommand.cpp b/src/hotspot/share/services/diagnosticCommand.cpp
index 1b3710cf004..7ae04cff2f7 100644
--- a/src/hotspot/share/services/diagnosticCommand.cpp
+++ b/src/hotspot/share/services/diagnosticCommand.cpp
@@ -33,6 +33,7 @@
 #include "compiler/compileBroker.hpp"
 #include "compiler/directivesParser.hpp"
 #include "gc/shared/gcVMOperations.hpp"
+#include "jfr/jfrEvents.hpp"
 #include "memory/metaspace/metaspaceDCmd.hpp"
 #include "memory/resourceArea.hpp"
 #include "memory/universe.hpp"
@@ -226,6 +227,11 @@ void HelpDCmd::execute(DCmdSource source, TRAPS) {
 }
 
 void VersionDCmd::execute(DCmdSource source, TRAPS) {
+  EventDebug ed;
+  ed.set_message("hello, world!");
+  ed.set_value(4711);
+  ed.commit();
+  
   output()->print_cr("%s version %s", VM_Version::vm_name(),
           VM_Version::vm_release());
   JDK_Version jdk_version = JDK_Version::current();
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/EventType.java b/src/jdk.jfr/share/classes/jdk/jfr/EventType.java
index 27bb9825abd..46145ef2e8b 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/EventType.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/EventType.java
@@ -241,4 +241,9 @@ public final class EventType {
     PlatformEventType getPlatformEventType() {
         return platformEventType;
     }
+
+    // package private
+    boolean isVisible() {
+        return platformEventType.isVisible();
+    }
 }
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorderPermission.java b/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorderPermission.java
index 789fa18fdb3..7b89ddf02c8 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorderPermission.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorderPermission.java
@@ -203,6 +203,11 @@ public final class FlightRecorderPermission extends java.security.BasicPermissio
         public EventSettings newEventSettings(EventSettingsModifier esm) {
             return new EventSettings.DelegatedEventSettings(esm);
         }
+
+        @Override
+        public boolean isVisible(EventType t) {
+            return t.isVisible();
+        }
     }
 
     /**
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/EventControl.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/EventControl.java
index 6a89ce02d1e..b0fdce2d6c9 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/EventControl.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/EventControl.java
@@ -292,7 +292,7 @@ public final class EventControl {
         }
         ActiveSettingEvent event = ActiveSettingEvent.EVENT.get();
         for (NamedControl nc : namedControls) {
-            if (Utils.isSettingVisible(nc.control, type.hasEventHook())) {
+            if (Utils.isSettingVisible(nc.control, type.hasEventHook()) && type.isVisible()) {
                 String value = nc.control.getLastValue();
                 if (value == null) {
                     value = nc.control.getDefaultValue();
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/JVMUpcalls.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/JVMUpcalls.java
index 2e4e4c95a3f..be1dab301b7 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/JVMUpcalls.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/JVMUpcalls.java
@@ -125,14 +125,22 @@ final class JVMUpcalls {
         }
     }
 
+    /**
+     * Called by the JVM to ensure metadata for internal events/types become public.
+     *
+     * Must be called after metadata repository has been initialized (JFR created).
+     *
+     */
+    static void unhideInternalTypes() {
+        MetadataRepository.unhideInternalTypes();
+    }
+
     /**
      * Called by the JVM to create the recorder thread.
      *
-     * @param systemThreadGroup
-     *            the system thread group
+     * @param systemThreadGroup  the system thread group
      *
-     * @param contextClassLoader
-     *            the context class loader.
+     * @param contextClassLoader the context class loader.
      *
      * @return a new thread
      */
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataLoader.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataLoader.java
index ef9c22556f2..3d94f819382 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataLoader.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataLoader.java
@@ -53,7 +53,8 @@ public final class MetadataLoader {
 
     // Caching to reduce allocation pressure and heap usage
     private final AnnotationElement RELATIONAL = new AnnotationElement(Relational.class);
-    private final AnnotationElement ENABLED = new AnnotationElement(Enabled.class, false);
+    private final AnnotationElement ENABLED = new AnnotationElement(Enabled.class, true);
+    private final AnnotationElement DISABLED = new AnnotationElement(Enabled.class, false);
     private final AnnotationElement THRESHOLD = new AnnotationElement(Threshold.class, "0 ns");
     private final AnnotationElement STACK_TRACE = new AnnotationElement(StackTrace.class, true);
     private final AnnotationElement TRANSITION_TO = new AnnotationElement(TransitionTo.class);
@@ -82,6 +83,7 @@ public final class MetadataLoader {
         private final boolean isEvent;
         private final boolean isRelation;
         private final boolean experimental;
+        private final boolean internal;
         private final long id;
 
         public TypeElement(DataInputStream dis) throws IOException {
@@ -101,10 +103,11 @@ public final class MetadataLoader {
             cutoff = dis.readBoolean();
             throttle = dis.readBoolean();
             experimental = dis.readBoolean();
+            internal = dis.readBoolean();
             id = dis.readLong();
             isEvent = dis.readBoolean();
             isRelation = dis.readBoolean();
-        }
+       }
     }
 
     // <Field>
@@ -315,7 +318,11 @@ public final class MetadataLoader {
             }
             Type type;
             if (t.isEvent) {
-                aes.add(ENABLED);
+                if (t.internal) {
+                    aes.add(ENABLED);
+                } else  {
+                    aes.add(DISABLED);
+                }
                 type = new PlatformEventType(t.name, t.id, false, true);
             } else {
                 type = knownTypeMap.get(t.name);
@@ -328,6 +335,15 @@ public final class MetadataLoader {
                     }
                 }
             }
+            if (t.internal) {
+                type.setInternal(true); 
+                // Internal types are hidden by default
+                type.setVisible(false);
+                // Internal events are enabled by default
+                if (type instanceof PlatformEventType pe) {
+                    pe.setEnabled(true);
+                }
+            }
             type.setAnnotations(aes);
             typeMap.put(t.name, type);
         }
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataRepository.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataRepository.java
index 0c798b8b28e..f557ad36ba0 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataRepository.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataRepository.java
@@ -33,7 +33,9 @@ import java.io.DataOutputStream;
 import java.io.IOException;
 import java.time.Instant;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -70,8 +72,9 @@ public final class MetadataRepository {
     }
 
     private void initializeJVMEventTypes() {
+        try {
         List<RequestHook> requestHooks = new ArrayList<>();
-        for (Type type : typeLibrary.getTypes()) {
+        for (Type type : new ArrayList<>(typeLibrary.getTypes())) {
             if (type instanceof PlatformEventType pEventType) {
                 EventType eventType = PrivateAccess.getInstance().newEventType(pEventType);
                 pEventType.setHasDuration(eventType.getAnnotation(Threshold.class) != null);
@@ -91,7 +94,10 @@ public final class MetadataRepository {
                 nativeEventTypes.add(eventType);
             }
         }
-        RequestEngine.addHooks(requestHooks);
+        RequestEngine.addHooks(requestHooks); } catch (Throwable t) {
+            t.printStackTrace();
+            throw t;
+        }
     }
 
     public static MetadataRepository getInstance() {
@@ -106,7 +112,11 @@ public final class MetadataRepository {
                 eventTypes.add(h.getEventType());
             }
         }
-        eventTypes.addAll(nativeEventTypes);
+        for (EventType t : nativeEventTypes) {
+            if (PrivateAccess.getInstance().isVisible(t)) {
+                eventTypes.add(t);
+            }
+        }
         return eventTypes;
     }
 
@@ -243,7 +253,13 @@ public final class MetadataRepository {
         ByteArrayOutputStream baos = new ByteArrayOutputStream(40000);
         DataOutputStream daos = new DataOutputStream(baos);
         try {
-            List<Type> types = typeLibrary.getTypes();
+            List<Type> types = typeLibrary.getVisibleTypes();
+            if (Logger.shouldLog(LogTag.JFR_METADATA, LogLevel.INFO)) {
+                Collections.sort(types,Comparator.comparing(Type::getName));
+                for (Type t: types) {
+                    Logger.log(LogTag.JFR_METADATA, LogLevel.INFO, "Serialized type: " + t.getName() + " id=" + t.getId());
+                }
+            }
             Collections.sort(types);
             MetadataDescriptor.write(types, daos);
             daos.flush();
@@ -349,4 +365,21 @@ public final class MetadataRepository {
         jvm.flush();
     }
 
+    static void unhideInternalTypes() {
+        for (Type t : TypeLibrary.getInstance().getTypes()) {
+            if (t.isInternal()) {
+                t.setVisible(true);
+                Logger.log(LogTag.JFR_METADATA, LogLevel.INFO, "Unhiding internal type " + t.getName());
+            }
+        }
+        // Singleton should have been initialized here.
+        // It's not possible to call MetadataRepository().getInstance(),
+        // because it will deadlock with Java thread calling flush() or setOutput();
+        instance.storeDescriptorInJVM();
+        Logger.log(LogTag.JFR_METADATA, LogLevel.INFO, "Internal types unhidden");
+    }
+
+    public synchronized List<Type> getVisibleTypes() {
+        return typeLibrary.getVisibleTypes();
+    }
 }
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/PrivateAccess.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/PrivateAccess.java
index def05bba4c9..09d53b4b562 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/PrivateAccess.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/PrivateAccess.java
@@ -103,4 +103,6 @@ public abstract class PrivateAccess {
     public abstract AccessControlContext getContext(SettingControl sc);
 
     public abstract EventSettings newEventSettings(EventSettingsModifier esm);
+
+    public abstract boolean isVisible(EventType t);
 }
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/Type.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/Type.java
index 9b6891bcdec..13262b242f0 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/Type.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/Type.java
@@ -89,6 +89,8 @@ public class Type implements Comparable<Type> {
     private Boolean simpleType; // calculated lazy
     private boolean remove = true;
     private long id;
+    private boolean visible = true;
+    private boolean internal;
 
     /**
      * Creates a type
@@ -337,4 +339,20 @@ public class Type implements Comparable<Type> {
     public void setId(long id) {
         this.id = id;
     }
+
+    public void setVisible(boolean visible) {
+        this.visible = visible;
+    }
+    
+    public boolean isVisible() {
+        return visible;
+    }
+
+    public void setInternal(boolean internal) {
+        this.internal = internal;
+    }
+    
+    public boolean isInternal() {
+        return internal;
+    }
 }
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/TypeLibrary.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/TypeLibrary.java
index fb16c92f171..ddc5255b93d 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/TypeLibrary.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/TypeLibrary.java
@@ -118,8 +118,19 @@ public final class TypeLibrary {
         }
     }
 
-    public List<Type> getTypes() {
-        return new ArrayList<>(types.values());
+    public Collection<Type> getTypes() {
+        return types.values();
+    }
+
+    // Returned list should be mutable (for in-place sorting)
+    public List<Type> getVisibleTypes() {
+        List<Type> visible = new ArrayList<>(types.size());
+        types.values().forEach(t -> {
+            if (t.isVisible()) {
+                visible.add(t);
+            }
+        });
+        return visible;
     }
 
     public static Type createAnnotationType(Class<? extends Annotation> a) {
diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Metadata.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Metadata.java
index c72a34edfd0..58f4bc2cfc0 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Metadata.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Metadata.java
@@ -43,7 +43,7 @@ import jdk.jfr.consumer.RecordingFile;
 import jdk.jfr.internal.PlatformEventType;
 import jdk.jfr.internal.PrivateAccess;
 import jdk.jfr.internal.Type;
-import jdk.jfr.internal.TypeLibrary;
+import jdk.jfr.internal.MetadataRepository;
 import jdk.jfr.internal.consumer.JdkJfrConsumer;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
@@ -231,7 +231,7 @@ final class Metadata extends Command {
         if (file == null) {
             // Force initialization
             FlightRecorder.getFlightRecorder().getEventTypes();
-            return TypeLibrary.getInstance().getTypes();
+            return MetadataRepository.getInstance().getVisibleTypes();
         }
         try (RecordingFile rf = new RecordingFile(file)) {
             return PRIVATE_ACCESS.readTypes(rf);
diff --git a/src/jdk.jfr/share/conf/jfr/default.jfc b/src/jdk.jfr/share/conf/jfr/default.jfc
index 7ffacfc0248..b168791f479 100644
--- a/src/jdk.jfr/share/conf/jfr/default.jfc
+++ b/src/jdk.jfr/share/conf/jfr/default.jfc
@@ -775,11 +775,6 @@
       <setting name="threshold">0 ms</setting>
     </event>
 
-    <event name="jdk.ZThreadDebug">
-      <setting name="enabled">true</setting>
-      <setting name="threshold">0 ms</setting>
-    </event>
-
     <event name="jdk.ZUncommit">
       <setting name="enabled">true</setting>
       <setting name="threshold">0 ms</setting>
diff --git a/src/jdk.jfr/share/conf/jfr/profile.jfc b/src/jdk.jfr/share/conf/jfr/profile.jfc
index 03eac2e8669..8d1bada4638 100644
--- a/src/jdk.jfr/share/conf/jfr/profile.jfc
+++ b/src/jdk.jfr/share/conf/jfr/profile.jfc
@@ -775,11 +775,6 @@
       <setting name="threshold">0 ms</setting>
     </event>
 
-    <event name="jdk.ZThreadDebug">
-      <setting name="enabled">true</setting>
-      <setting name="threshold">0 ms</setting>
-    </event>
-
     <event name="jdk.ZUncommit">
       <setting name="enabled">true</setting>
       <setting name="threshold">0 ms</setting>
