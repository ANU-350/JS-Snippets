/*
 * Copyright (c) 2016, 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.HexFormat;
import java.util.List;
import java.util.stream.Collectors;

/**
 * HexDumpReader provides utility methods to read a hex dump text file
 * and convert to an InputStream.  The format supported by the methods
 * can be generated by the following command.
 *
 * $ od -vw -t x1 foo | sed -r -e 's/^[0-9]+ ?//' -e 's/ //g' -e '/^$/d'
 */
public final class HexDumpReader {

    // Utility class should not be instantiated
    private HexDumpReader() {
    }

    // Converts a Hex dump file (String) into an InputStream containing bytes
    public static InputStream getStreamFromHexDump(String fileName) {
        return getStreamFromHexDump(new File(System.getProperty("test.src", "."),
                fileName));
    }

    // Converts a Hex dump file (File) into an InputStream containing bytes
    public static InputStream getStreamFromHexDump(File hexFile) {
        List<String> lines;
        try {
            lines = Files.readAllLines(hexFile.toPath(), StandardCharsets.UTF_8);
        } catch (IOException e) {
            throw new RuntimeException(String.format("Utility class HexDumpReader" +
                    " threw %s when trying to read the file %s", e, hexFile.getName()));
        }
        // Grab all non-empty lines up until a '#' if one exists
        String hexString = lines.stream().map(String::trim)
                .map(s -> (s.contains("#")) ? s.substring(0, s.indexOf("#")).trim() : s)
                .filter(s -> !s.isEmpty()).collect(Collectors.joining());
        // Iterate the hex string and convert it to bytes
        byte[] bArray = HexFormat.of().parseHex(hexString);
        return new ByteArrayInputStream(bArray);
    }
}
