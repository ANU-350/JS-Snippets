/*
 * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

// This class does an invokespecial on method m() in indirect interface I that is
// pointed to by a constant pool Methodref (#3) instead of an InterfaceMethodRef.
// This should cause a VerifyError because the called method is in an indirect
// interface.
class IntfMethInKlass {
  0xCAFEBABE;
  0; // minor version
  62; // version
  [25] { // Constant Pool
    ; // first element is empty
    Method #8 #13; // #1     at 0x0A
    class #14; // #2     at 0x0F
    Method #17 #5; // #3     at 0x12
    Method #2 #13; // #4     at 0x17
    NameAndType #20 #16; // #5     at 0x1C
    Utf8 "Exceptions"; // #6     at 0x21
    class #9; // #7     at 0x2E
    class #10; // #8     at 0x31
    Utf8 "java/lang/Exception"; // #9     at 0x34
    Utf8 "java/lang/Object"; // #10     at 0x4A
    Utf8 "([Ljava/lang/String;)V"; // #11     at 0x5D
    Utf8 "main"; // #12     at 0x76
    NameAndType #22 #16; // #13     at 0x7D
    Utf8 "IntfMethInKlass"; // #14     at 0x82
    Utf8 "SourceFile"; // #15     at 0x94
    Utf8 "()V"; // #16     at 0xA1
    class #18; // #17     at 0xA7
    Utf8 "I"; // #18     at 0xAA
    Utf8 "IntfMethInKlass.jasm"; // #19     at 0xAE
    Utf8 "m"; // #20     at 0xC5
    Utf8 "Code"; // #21     at 0xC9
    Utf8 "<init>"; // #22     at 0xD0
    class #24; // #23
    Utf8 "J"; // #24
  } // Constant Pool

  0x0021; // access [ ACC_PUBLIC ACC_SUPER ]
  #2;// this_cpx
  #8;// super_cpx

  [1] { // Interfaces
    #23; // J
  } // Interfaces

  [0] { // Fields
  } // Fields

  [2] { // Methods
    {  // method at 0xE7
      0x0001; // access
      #22; // name_index       : <init>
      #16; // descriptor_index : ()V
      [1] { // Attributes
        Attr(#21, 17) { // Code at 0xEF
          1; // max_stack
          1; // max_locals
          Bytes[5]{
            0x2AB70001B1;
          }
          [0] { // Traps
          } // end Traps
          [0] { // Attributes
          } // Attributes
        } // end Code
      } // Attributes
    }
    ;
    {  // method at 0x0106
      0x0009; // access
      #12; // name_index       : main
      #11; // descriptor_index : ([Ljava/lang/String;)V
      [2] { // Attributes
        Attr(#6, 4) { // Exceptions at 0x010E
          [1] { // Exceptions
            #7; //  at 0x0118
          }
        } // end Exceptions
        ;
        Attr(#21, 25) { // Code at 0x0118
          2; // max_stack
          2; // max_locals
          Bytes[13]{
            0xBB000259B700044C;
            0x2BB70003B1;
          }
          [0] { // Traps
          } // end Traps
          [0] { // Attributes
          } // Attributes
        } // end Code
      } // Attributes
    }
  } // Methods

  [1] { // Attributes
    Attr(#15, 2) { // SourceFile at 0x0139
      #19;
    } // end SourceFile
  } // Attributes
} // end class IntfMethInKlass
