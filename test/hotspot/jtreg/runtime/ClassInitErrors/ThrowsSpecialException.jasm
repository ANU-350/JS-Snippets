/*
 * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */


/*
    static public class ThrowsSpecialException {
        static {
            // Can't trick javac, have to use jasm.
            // if (true) foo();
        }
        static private void foo() throws SpecialException {
            if (true) throw new SpecialException(3, "Very Special ");
        }
    }
*/

super public class InitExceptionUnloadTest$ThrowsSpecialException
	version 62:0
{


public Method "<init>":"()V"
	stack 1 locals 1
{
		aload_0;
		invokespecial	Method java/lang/Object."<init>":"()V";
		return;
}

private static Method foo:"()V"
	throws InitExceptionUnloadTest$SpecialException
	stack 4 locals 0
{
		new	class InitExceptionUnloadTest$SpecialException;
		dup;
		iconst_3;
		ldc	String "Very Special ";
		invokespecial	Method InitExceptionUnloadTest$SpecialException."<init>":"(ILjava/lang/String;)V";
		athrow;
}

static Method "<clinit>":"()V"
	stack 0 locals 0
{
                invokestatic  Method "foo":"()V";
		return;
}

NestHost InitExceptionUnloadTest;
public static InnerClass SpecialException=class InitExceptionUnloadTest$SpecialException of class InitExceptionUnloadTest;
public static InnerClass ThrowsSpecialException=class InitExceptionUnloadTest$ThrowsSpecialException of class InitExceptionUnloadTest;

} // end Class InitExceptionUnloadTest$ThrowsSpecialException
