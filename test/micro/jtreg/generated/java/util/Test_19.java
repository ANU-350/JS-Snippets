/*
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
  * accompanied this code).
  *
  * You should have received a copy of the GNU General Public License version
  * 2 along with this work; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */

/* DO NOT MODIFY THIS FILE. GENERATED BY TestGenerator */

/**
 * @test org.openjdk.bench.java.util.regex.PatternBench.canonicalJmodMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.regex.PatternBench.canonicalJmodMatch
 */

/**
 * @test org.openjdk.bench.java.util.regex.PatternBench.charPatternCompile
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.regex.PatternBench.charPatternCompile
 */

/**
 * @test org.openjdk.bench.java.util.regex.PatternBench.charPatternMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.regex.PatternBench.charPatternMatch
 */

/**
 * @test org.openjdk.bench.java.util.regex.PatternBench.charPatternMatchWithCompile
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.regex.PatternBench.charPatternMatchWithCompile
 */

/**
 * @test org.openjdk.bench.java.util.regex.PatternBench.longStringGraphemeMatches
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.regex.PatternBench.longStringGraphemeMatches
 */

/**
 * @test org.openjdk.bench.java.util.regex.PatternBench.normalJmodMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.regex.PatternBench.normalJmodMatch
 */

/**
 * @test org.openjdk.bench.java.util.regex.PatternBench.splitFlags
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.regex.PatternBench.splitFlags
 */

/**
 * @test org.openjdk.bench.java.util.stream.AllMatcher.par_anyMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AllMatcher.par_anyMatch
 */

/**
 * @test org.openjdk.bench.java.util.stream.AllMatcher.par_filter_findAny
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AllMatcher.par_filter_findAny
 */

/**
 * @test org.openjdk.bench.java.util.stream.AllMatcher.par_filter_findFirst
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AllMatcher.par_filter_findFirst
 */

/**
 * @test org.openjdk.bench.java.util.stream.AllMatcher.seq_anyMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AllMatcher.seq_anyMatch
 */

/**
 * @test org.openjdk.bench.java.util.stream.AllMatcher.seq_filter_findAny
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AllMatcher.seq_filter_findAny
 */

/**
 * @test org.openjdk.bench.java.util.stream.AllMatcher.seq_filter_findFirst
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AllMatcher.seq_filter_findFirst
 */

/**
 * @test org.openjdk.bench.java.util.stream.AnyMatcher.par_anyMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AnyMatcher.par_anyMatch
 */

/**
 * @test org.openjdk.bench.java.util.stream.AnyMatcher.par_filter_findAny
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AnyMatcher.par_filter_findAny
 */

/**
 * @test org.openjdk.bench.java.util.stream.AnyMatcher.par_filter_findFirst
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AnyMatcher.par_filter_findFirst
 */

/**
 * @test org.openjdk.bench.java.util.stream.AnyMatcher.seq_anyMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AnyMatcher.seq_anyMatch
 */

/**
 * @test org.openjdk.bench.java.util.stream.AnyMatcher.seq_filter_findAny
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AnyMatcher.seq_filter_findAny
 */

/**
 * @test org.openjdk.bench.java.util.stream.AnyMatcher.seq_filter_findFirst
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.AnyMatcher.seq_filter_findFirst
 */

/**
 * @test org.openjdk.bench.java.util.stream.Decomposition.saturated_parallel
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.Decomposition.saturated_parallel
 */

/**
 * @test org.openjdk.bench.java.util.stream.Decomposition.saturated_sequential
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.Decomposition.saturated_sequential
 */

/**
 * @test org.openjdk.bench.java.util.stream.Decomposition.thinktime_parallel
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.Decomposition.thinktime_parallel
 */

/**
 * @test org.openjdk.bench.java.util.stream.Decomposition.thinktime_sequential
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.Decomposition.thinktime_sequential
 */

/**
 * @test org.openjdk.bench.java.util.stream.NoneMatcher.par_anyMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.NoneMatcher.par_anyMatch
 */

/**
 * @test org.openjdk.bench.java.util.stream.NoneMatcher.seq_anyMatch
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.NoneMatcher.seq_anyMatch
 */

/**
 * @test org.openjdk.bench.java.util.stream.Reducers.par_reduce
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.Reducers.par_reduce
 */

/**
 * @test org.openjdk.bench.java.util.stream.Reducers.par_reduce_base
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.Reducers.par_reduce_base
 */

/**
 * @test org.openjdk.bench.java.util.stream.Reducers.seq_reduce
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.Reducers.seq_reduce
 */

/**
 * @test org.openjdk.bench.java.util.stream.Reducers.seq_reduce_base
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.Reducers.seq_reduce_base
 */

/**
 * @test org.openjdk.bench.java.util.stream.ops.ref.AllMatch.par_chain111
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.stream.ops.ref.AllMatch.par_chain111
 */

