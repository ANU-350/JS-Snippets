/*
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
  * accompanied this code).
  *
  * You should have received a copy of the GNU General Public License version
  * 2 along with this work; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */

/* DO NOT MODIFY THIS FILE. GENERATED BY TestGenerator */

/**
 * @test org.openjdk.bench.java.util.UUIDBench.fromString
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.UUIDBench.fromString
 */

/**
 * @test org.openjdk.bench.java.util.UUIDBench.toString
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.UUIDBench.toString
 */

/**
 * @test org.openjdk.bench.java.util.ZipFind.testNonExistingAndExisting
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.ZipFind.testNonExistingAndExisting
 */

/**
 * @test org.openjdk.bench.java.util.ZipFind.testOneExisting
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.ZipFind.testOneExisting
 */

/**
 * @test org.openjdk.bench.java.util.ZipFind.testOneNonExisting
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.ZipFind.testOneNonExisting
 */

/**
 * @test org.openjdk.bench.java.util.ZipFind.testThreeExisting
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.ZipFind.testThreeExisting
 */

/**
 * @test org.openjdk.bench.java.util.ZipFind.testTwoExisting
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.ZipFind.testTwoExisting
 */

/**
 * @test org.openjdk.bench.java.util.ZipFind.testTwoNonExisting
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.ZipFind.testTwoNonExisting
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.Atomic.testAtomicBooleanFlip
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.Atomic.testAtomicBooleanFlip
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.Atomic.testAtomicBooleanSame
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.Atomic.testAtomicBooleanSame
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.Atomic.testAtomicIntegerAlways
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.Atomic.testAtomicIntegerAlways
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.Atomic.testAtomicIntegerGetAndIncrement
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.Atomic.testAtomicIntegerGetAndIncrement
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.Atomic.testAtomicIntegerNever
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.Atomic.testAtomicIntegerNever
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.Atomic.testAtomicLongGetAndIncrement
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.Atomic.testAtomicLongGetAndIncrement
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.Atomic.testAtomicReference
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.Atomic.testAtomicReference
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testAddAndGet
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testAddAndGet
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testInnerCapture
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testInnerCapture
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testInnerCaptureCached
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testInnerCaptureCached
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testInnerNoCapture
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testInnerNoCapture
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testInnerNoCaptureCached
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testInnerNoCaptureCached
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testLambdaCapture
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testLambdaCapture
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testLambdaNoCapture
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet.testLambdaNoCapture
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.baselineRaw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.baselineRaw
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.testExplicit_Async
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.testExplicit_Async
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.testExplicit_Sync
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.testExplicit_Sync
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.testStandard_Async
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.testStandard_Async
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.testStandard_Sync
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking.testStandard_Sync
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.ForkJoinPoolRawCallable.baseline_TPE
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.ForkJoinPoolRawCallable.baseline_TPE
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.ForkJoinPoolRawCallable.baseline_raw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.ForkJoinPoolRawCallable.baseline_raw
 */

/**
 * @test org.openjdk.bench.java.util.concurrent.ForkJoinPoolRawCallable.testAsync
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.util.concurrent.ForkJoinPoolRawCallable.testAsync
 */

