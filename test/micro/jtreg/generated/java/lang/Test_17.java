/*
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
  * accompanied this code).
  *
  * You should have received a copy of the GNU General Public License version
  * 2 along with this work; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */

/* DO NOT MODIFY THIS FILE. GENERATED BY TestGenerator */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing.baselineExact
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing.baselineExact
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing.test_1_Convert
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing.test_1_Convert
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing.test_2_MTConvert
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing.test_2_MTConvert
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing.test_3_Call
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing.test_3_Call
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening.baselineExact
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening.baselineExact
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening.test_1_Convert
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening.test_1_Convert
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening.test_2_MTConvert
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening.test_2_MTConvert
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening.test_3_Call
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening.test_3_Call
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs.baselineInvoke
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs.baselineInvoke
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs.baselineInvokeExact
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs.baselineInvokeExact
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs.baselineRaw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs.baselineRaw
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs.testInvoke_WithArguments
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs.testInvoke_WithArguments
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.baselineAllocCompute
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.baselineAllocCompute
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.baselineCompute
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.baselineCompute
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.testCall
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.testCall
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.testCreate
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.testCreate
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.testCreateCall
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance.testCreateCall
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl.baselineReturn
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl.baselineReturn
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl.testInstanceTarget
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl.testInstanceTarget
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl.testInstanceType
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl.testInstanceType
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl.testIsWrapperInstance
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl.testIsWrapperInstance
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementGetter.baselineRaw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementGetter.baselineRaw
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementGetter.testCreate
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementGetter.testCreate
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementGetter.testGetter
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementGetter.testGetter
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementSetter.baselineRaw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementSetter.baselineRaw
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementSetter.testCreate
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementSetter.testCreate
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementSetter.testSetter
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementSetter.testSetter
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesCatchException.baselineExceptional
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesCatchException.baselineExceptional
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesCatchException.baselineNormal
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesCatchException.baselineNormal
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandlesCatchException.testExceptional
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandlesCatchException.testExceptional
 */

