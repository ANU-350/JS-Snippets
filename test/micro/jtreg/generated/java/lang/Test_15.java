/*
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
  * accompanied this code).
  *
  * You should have received a copy of the GNU General Public License version
  * 2 along with this work; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */

/* DO NOT MODIFY THIS FILE. GENERATED BY TestGenerator */

/**
 * @test org.openjdk.bench.java.lang.invoke.LookupDefineClass.WeakClass.load
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.LookupDefineClass.WeakClass.load
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.LookupPublicFind.testConstructor
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.LookupPublicFind.testConstructor
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.LookupPublicFind.testGetter
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.LookupPublicFind.testGetter
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.LookupPublicFind.testSetter
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.LookupPublicFind.testSetter
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.LookupPublicFind.testStatic
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.LookupPublicFind.testStatic
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.LookupPublicFind.testStaticGetter
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.LookupPublicFind.testStaticGetter
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.LookupPublicFind.testStaticSetter
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.LookupPublicFind.testStaticSetter
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.LookupPublicFind.testVirtual
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.LookupPublicFind.testVirtual
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.baselineMH
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.baselineMH
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.baselineMHCached
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.baselineMHCached
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.baselineRaw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.baselineRaw
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.baselineRawCached
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.baselineRawCached
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.testCollector
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.testCollector
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.testCreate
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector.testCreate
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.baselineMH
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.baselineMH
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.baselineRaw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.baselineRaw
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.testCreate
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.testCreate
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.testSpreader
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.testSpreader
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.testSpreaderCached
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader.testSpreaderCached
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.baselineMH
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.baselineMH
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.baselineMHCached
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.baselineMHCached
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.baselineRaw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.baselineRaw
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.baselineRawCached
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.baselineRawCached
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.testCollector
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.testCollector
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.testCreate
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector.testCreate
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.baselineRaw
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.baselineRaw
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.baselineReflect
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.baselineReflect
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.testMH_Plain_Exact
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.testMH_Plain_Exact
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.testMH_Plain_Invoke
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.testMH_Plain_Invoke
 */

/**
 * @test org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.testMH_Unreflect_Exact
 * @library /test/lib /
 * @run driver MicroRunner -f 1 org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke.testMH_Unreflect_Exact
 */

